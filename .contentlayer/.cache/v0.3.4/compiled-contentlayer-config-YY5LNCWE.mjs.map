{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { makeSource, defineDocumentType } from \"@contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport GithubSlugger from \"github-slugger\";\nimport readingTime from \"reading-time\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nconst Blog = defineDocumentType(() => ({\n  name: \"Blog\",\n  filePathPattern: \"blog/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    publishedAt: { type: \"date\", required: true },\n    updatedAt: { type: \"date\" },\n    description: { type: \"string\", required: true },\n    image: { type: \"image\" },\n    isPublished: { type: \"boolean\", default: true },\n    author: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" } },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/blog/${doc._raw.flattenedPath}`,\n    },\n    readingTime: {\n      type: \"json\",\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n    toc: {\n      type: \"json\",\n      resolve: async (doc) => {\n        const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n        const slugger = new GithubSlugger();\n        const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(\n          ({ groups }) => {\n            const flag = groups?.flag;\n            const content = groups?.content;\n\n            return {\n              level: flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\n              text: content,\n              slug: content ? slugger.slug(content) : undefined,\n            };\n          }\n        );\n\n        return headings;\n      },\n    },\n  },\n}));\n\nconst codeOptions = {\n  theme: \"github-dark\",\n  grid: false,\n};\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Blog],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: \"append\" }],\n      [rehypePrettyCode, codeOptions],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,YAAY,0BAA0B;AAC/C,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,mBAAmB;AAC1B,OAAO,iBAAiB;AACxB,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAEtB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC5C,WAAW,EAAE,MAAM,OAAO;AAAA,IAC1B,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,QAAQ;AAAA,IACvB,aAAa,EAAE,MAAM,WAAW,SAAS,KAAK;AAAA,IAC9C,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,EAC/C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,KAAK,aAAa;AAAA,IACnD;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC5C;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACtB,cAAM,YAAY;AAClB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,SAAS,CAAC,EAAE;AAAA,UAC5D,CAAC,EAAE,OAAO,MAAM;AACd,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AAExB,mBAAO;AAAA,cACL,OAAO,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,QAAQ;AAAA,cAC/D,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAM,cAAc;AAAA,EAClB,OAAO;AAAA,EACP,MAAM;AACR;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC;AAAA,MAC/C,CAAC,kBAAkB,WAAW;AAAA,IAChC;AAAA,EACF;AACF,CAAC;",
  "names": []
}
